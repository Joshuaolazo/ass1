Notes

1. Read Input (Maybe have to rewrite)
	a. -c Column
		i. 		make sure its present
	b. -d Directory
		i. 		if null use current directory
		ii.		if wrong output error****
			A. 		Wont be able to open with opendir
	c. -o Output Directory
		i.		if null save in same directory
		ii.		if wrong make the directory****
	d. Make sure column flags are correct
		i.		input letters
			A. 		Must be c,d,o
		ii.		number of args
			A. 		0,1,2,4,6,8+ Wrong
			B. 		3,3,5 Correct
		iii.	pattern of args
			A. 		Assume pattern of -c -d -o

2. Go to directory (TODO)
	a. Call method to see if file is directory (TODO)??


3. Open Directory/files (Almost Done)
	a. Ignore parent and current directory (. and ..) (DONE)
	b. Keep a string of directories (DONE)
	c. On .csv (DONE)
		i.	 	fork()
		iii.	sort csv
		iv.		print PID
	d. on directory (DONE)
		i.		fork()
		ii.		recurse
	e. count forks (TODO)
	f. use the return value of fork() in a conditional to choose different blocks of code to run within your code (TODO)
	g. prevent zombie and orphan child processes (TODO)
	h. do not create fork bombs that will bring down machines (TODO)
	i. assume 255 is max (TODO)
-----

1. Modularize Ass0 (DONE)
2. Check for CSV Validity (DONE)
	a. .csv
		i.		make sure column is in csv or output error (DONE)
	b. follows csv format
		i. 		check for same amount of commas (DONE)
		ii.		ignore commas in quotes (DONE)
		iii.	check for column headers are in the list (???)
		iv.		close file if wrong and deallocate (maybe)
			A. 		Free before return on error
3. Sort File (Random Errors but done)
	a. output with -sorted- (DONE)
	b. do not repeat sorting
4. Output into directory (TODO)


-----

1. Document Design
	a. how to use code
2. Make test csv files and describe them
3. Ask about random characters

comment out comma check turn back on
count pids
output to idir when ddir doesnt exist
dont repeat sorting
